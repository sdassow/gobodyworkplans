//+build ignore

package main

import (
	"encoding/json"
	//"fmt"
	"os"
	"log"
	"text/template"

	"bodyworkplans/data"
)








func main() {
	fin, err := os.Open("exercises.json")
	if err != nil {
		log.Fatal(err)
	}
	defer fin.Close()

	v := make(map[string]data.Exercise)

	dec := json.NewDecoder(fin)
	if err := dec.Decode(&v); err != nil {
		log.Fatal(err)
	}

	//log.Printf("got: %v", v)

	f, err := os.Create("exercises.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	//fmt.Fprintf(f, "package data\n")

	if err := packageTemplate.Execute(f, struct {
		Exercises map[string]data.Exercise
	}{
		Exercises: v,
	}); err != nil {
		log.Fatal(err)
	}
}



var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package data

import "time"

var Exercises = map[string]Exercise{
{{- range .Exercises }}
	{{ printf "%q" .Name }}: Exercise{
		Name: {{ printf "%q" .Name }},
		Steps: []Step{
{{- range .Steps }}
			Step{
				Name: {{ printf "%q" .Name }},
				Goals: []Goal{
{{- range .Goals }}
					Goal{ {{ .Amount }}, {{ .Repetitions }}, time.Duration({{ .Duration.Nanoseconds }}) }, // {{ printf "%q" .Duration }}
{{- end }}
				},
			},
{{- end }}
		},
	},
{{- end }}
}
`))
