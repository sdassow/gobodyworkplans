//+build ignore

package main

import (
	"encoding/json"
	//"fmt"
	"log"
	"os"
	"text/template"

	"bodyworkplans/data"
)

func main() {
	fin, err := os.Open("plans.json")
	if err != nil {
		log.Fatal(err)
	}
	defer fin.Close()

	v := make(map[string]data.Plan)

	dec := json.NewDecoder(fin)
	if err := dec.Decode(&v); err != nil {
		log.Fatal(err)
	}

	for k, p := range v {
		p.Name = k
	}

	//log.Printf("got: %v", v)

	f, err := os.Create("plans.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	//fmt.Fprintf(f, "package data\n")

	if err := packageTemplate.Execute(f, struct {
		Plans map[string]data.Plan
	}{
		Plans: v,
	}); err != nil {
		log.Fatal(err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package data

//*

var Plans = map[string]Plan{
{{- range $k, $v := .Plans }}
	{{ printf "%q" $k }}: Plan{
		Name: {{ printf "%q" $k }},
		Days: Days{
{{- range $dk, $dv := .Days }}
			{{ printf "%q" $dk }}: []Workout{
{{- range $dv }}
				Workout{
					Name: {{ printf "%q" .Name }},
					Sets: []int{
{{- range .Sets }}
						{{ . }},
{{- end }}
					},
				},
{{- end }}
			},
{{- end }}
		},
	},
{{- end }}
}
//*/
`))
